var searchIndex = {};
searchIndex['kiss3d'] = {"items":[[0,"","kiss3d","# kiss3d"],[0,"window","","The kiss3d window."],[1,"Window","kiss3d::window","Structure representing a window and a 3D scene."],[11,"events","","",0],[11,"glfw","","",0],[11,"window","","",0],[11,"max_ms_per_frame","","",0],[11,"scene","","",0],[11,"camera","","",0],[11,"light_mode","","",0],[11,"background","","",0],[11,"line_renderer","","",0],[11,"point_renderer","","",0],[11,"text_renderer","","",0],[11,"framebuffer_manager","","",0],[11,"post_processing","","",0],[11,"post_process_render_target","","",0],[10,"context","","Access the glfw context.",0],[10,"glfw_window","","Access the glfw window.",0],[10,"set_post_processing_effect","","Sets the current processing effect.",0],[10,"width","","The window width.",0],[10,"height","","The window height.",0],[10,"camera","","The current camera.",0],[10,"set_camera","","The current camera.",0],[10,"set_framerate_limit","","Sets the maximum number of frames per second. Cannot be 0. `None` means there is no limit.",0],[10,"close","","Closes the window.",0],[10,"hide","","Hides the window, without closing it. Use `show` to make it visible again.",0],[10,"show","","Makes the window visible. Use `hide` to hide it.",0],[10,"set_background_color","","Sets the background color.",0],[10,"draw_line","","Adds a line to be drawn during the next frame.",0],[10,"draw_point","","Adds a point to be drawn during the next frame.",0],[10,"draw_text","","Adds a string to be drawn during the next frame.",0],[10,"remove","","Removes an object from the scene.",0],[10,"add_group","","Adds a group to the scene.",0],[10,"add_obj","","Adds an obj model to the scene.",0],[10,"add_mesh","","Adds an unnamed mesh to the scene.",0],[10,"add_trimesh","","Creates and adds a new object using the geometry generated by a given procedural generator.\nCreates and adds a new object using a mesh descriptor.",0],[10,"add_geom_with_name","","Creates and adds a new object using the geometry registered as `geometry_name`.",0],[10,"add_cube","","Adds a cube to the scene. The cube is initially axis-aligned and centered at (0, 0, 0).",0],[10,"add_sphere","","Adds a sphere to the scene. The sphere is initially centered at (0, 0, 0).",0],[10,"add_cone","","Adds a cone to the scene. The cone is initially centered at (0, 0, 0) and points toward the\npositive `y` axis.",0],[10,"add_cylinder","","Adds a cylinder to the scene. The cylinder is initially centered at (0, 0, 0) and has its\nprincipal axis aligned with the `y` axis.",0],[10,"add_capsule","","Adds a capsule to the scene. The capsule is initially centered at (0, 0, 0) and has its\nprincipal axis aligned with the `y` axis.",0],[10,"add_quad","","Adds a double-sided quad to the scene. The quad is initially centered at (0, 0, 0). The\nquad itself is composed of a user-defined number of triangles regularly spaced on a grid.\nThis is the main way to draw height maps.",0],[10,"add_quad_with_vertices","","Adds a double-sided quad with the specified vertices.",0],[10,"project","","Converts a 3d point to 2d screen coordinates.",0],[10,"unproject","","Converts a point in 2d screen coordinates to a ray (a 3d position and a direction).",0],[10,"poll_events","","Poll events and pass them to a user-defined function. If the function returns `true`, the\ndefault engine event handler (camera, framebuffer size, etc.) is executed, if it returns\n`false`, the default engine event handler is not executed. Return `false` if you want to\noverride the default engine behaviour.",0],[10,"render_loop","","Starts an infinite loop polling events, calling an user-defined callback, and drawing the\nscene.",0],[10,"set_light","","Sets the light mode. Only one light is supported.",0],[10,"spawn_hidden","","Opens a window, hide it then calls a user-defined procedure.",0],[10,"spawn","","Opens a window then calls a user-defined procedure.",0],[10,"spawn_size","","Opens a window with a custom size then calls a user-defined procedure.",0],[10,"scene","","Reference to the scene associated with this window.",0],[10,"scene_mut","","Mutable reference to the scene associated with this window.",0],[10,"snap","","Read the pixels currently displayed to the screen.",0],[0,"scene","kiss3d","Everything related to the scene graph."],[1,"SceneNode","kiss3d::scene","A node of the scene graph."],[11,"data","","",1],[1,"SceneNodeData","","The datas contained by a `SceneNode`."],[11,"local_scale","","",2],[11,"local_transform","","",2],[11,"world_scale","","",2],[11,"world_transform","","",2],[11,"visible","","",2],[11,"up_to_date","","",2],[11,"children","","",2],[11,"object","","",2],[11,"parent","","",2],[1,"Object","","A 3d objects on the scene."],[11,"data","","",3],[11,"mesh","","",3],[1,"ObjectData","","Set of data identifying a scene node."],[11,"material","","",4],[11,"texture","","",4],[11,"color","","",4],[11,"wlines","","",4],[11,"wpoints","","",4],[11,"draw_surface","","",4],[11,"cull","","",4],[11,"user_data","","",4],[0,"camera","kiss3d","Camera trait with some common implementations."],[1,"ArcBall","kiss3d::camera","Arc-ball camera mode."],[11,"at","","The focus point.",5],[11,"yaw","","Yaw of the camera (rotation along the y axis).",5],[11,"pitch","","Pitch of the camera (rotation along the x axis).",5],[11,"dist","","Distance from the camera to the `at` focus point.",5],[11,"yaw_step","","Increment of the yaw per unit mouse movement. The default value is 0.005.",5],[11,"pitch_step","","Increment of the pitch per unit mouse movement. The default value is 0.005.",5],[11,"dist_step","","Increment of the distance per unit scrolling. The default value is 40.0.",5],[11,"fov","","",5],[11,"znear","","",5],[11,"zfar","","",5],[11,"projection","","",5],[11,"proj_view","","",5],[11,"inv_proj_view","","",5],[11,"last_cursor_pos","","",5],[1,"FirstPerson","","First-person camera mode."],[11,"eye","","",6],[11,"yaw","","",6],[11,"pitch","","",6],[11,"yaw_step","","",6],[11,"pitch_step","","",6],[11,"move_step","","",6],[11,"fov","","",6],[11,"znear","","",6],[11,"zfar","","",6],[11,"projection","","",6],[11,"proj_view","","",6],[11,"inv_proj_view","","",6],[11,"last_cursor_pos","","",6],[1,"FirstPersonStereo","","First-person camera mode."],[11,"eye","","The camera position",7],[11,"eye_left","","",7],[11,"eye_right","","",7],[11,"ipd","","Inter Pupilary Distance",7],[11,"yaw","","Yaw of the camera (rotation along the y axis).",7],[11,"pitch","","Pitch of the camera (rotation along the x axis).",7],[11,"yaw_step","","Increment of the yaw per unit mouse movement. The default value is 0.005.",7],[11,"pitch_step","","Increment of the pitch per unit mouse movement. The default value is 0.005.",7],[11,"move_step","","Increment of the translation per arrow press. The default value is 0.1.",7],[11,"fov","","Low level datas",7],[11,"znear","","",7],[11,"zfar","","",7],[11,"projection","","",7],[11,"proj_view","","",7],[11,"proj_view_left","","",7],[11,"proj_view_right","","",7],[11,"inv_proj_view","","",7],[11,"last_cursor_pos","","",7],[0,"light","kiss3d","Lights."],[2,"Light","kiss3d::light","The light configuration."],[12,"Absolute","","A light with an absolute world position.",8],[12,"StickToCamera","","A light superimposed with the camera position.",8],[0,"loader","kiss3d","File loading."],[0,"obj","kiss3d::loader","Simplistic obj loader."],[3,"parse_file","kiss3d::loader::obj","Parses an obj file."],[3,"parse","","Parses a string representing an obj file."],[4,"Coord","",""],[4,"Normal","",""],[4,"UV","",""],[0,"mtl","kiss3d::loader","Simplistic mtl loader."],[1,"MtlMaterial","kiss3d::loader::mtl","Material informations read from a `.mtl` file."],[11,"name","","Name of the material.",9],[11,"ambiant_texture","","Path to the ambiant texture.",9],[11,"diffuse_texture","","Path to the diffuse texture.",9],[11,"specular_texture","","Path to the specular texture.",9],[11,"opacity_map","","Path to the opacity map.",9],[11,"ambiant","","The ambiant color.",9],[11,"diffuse","","The diffuse color.",9],[11,"specular","","The specular color.",9],[11,"shininess","","The shininess.",9],[11,"alpha","","Alpha blending.",9],[3,"parse_file","","Parses a mtl file."],[3,"parse","","Parses a string representing a mtl file."],[10,"clone","","",9],[10,"new_default","","Creates a new mtl material with a name and default values.",9],[10,"new","","Creates a new mtl material.",9],[0,"line_renderer","kiss3d","A batched line renderer."],[1,"LineRenderer","kiss3d::line_renderer","Structure which manages the display of short-living lines."],[11,"shader","","",10],[11,"pos","","",10],[11,"color","","",10],[11,"view","","",10],[11,"lines","","",10],[11,"max_lines","","",10],[5,"LINES_VERTEX_SRC","","Vertex shader used by the material to display line."],[5,"LINES_FRAGMENT_SRC","","Fragment shader used by the material to display line."],[10,"new","","Creates a new lines manager.",10],[10,"needs_rendering","","Indicates whether some lines have to be drawn.",10],[10,"draw_line","","Adds a line to be drawn during the next frame. Lines are not persistent between frames.\nThis method must be called for each line to draw, and at each update loop iteration.",10],[10,"render","","Actually draws the lines.",10],[0,"point_renderer","kiss3d","A batched point renderer."],[1,"PointRenderer","kiss3d::point_renderer","Structure which manages the display of short-living points."],[11,"shader","","",11],[11,"pos","","",11],[11,"color","","",11],[11,"view","","",11],[11,"points","","",11],[11,"max_points","","",11],[5,"POINTS_VERTEX_SRC","","Vertex shader used by the material to display line."],[5,"POINTS_FRAGMENT_SRC","","Fragment shader used by the material to display line."],[10,"new","","Creates a new points manager.",11],[10,"needs_rendering","","Indicates whether some points have to be drawn.",11],[10,"draw_point","","Adds a line to be drawn during the next frame. Lines are not persistent between frames.\nThis method must be called for each line to draw, and at each update loop iteration.",11],[10,"render","","Actually draws the points.",11],[0,"builtin","kiss3d","Built-in geometries, shaders and effects."],[1,"ObjectMaterial","kiss3d::builtin","The default material used to draw objects."],[11,"shader","","",12],[11,"pos","","",12],[11,"normal","","",12],[11,"tex_coord","","",12],[11,"light","","",12],[11,"color","","",12],[11,"transform","","",12],[11,"scale","","",12],[11,"ntransform","","",12],[11,"view","","",12],[11,"tex","","",12],[1,"NormalsMaterial","","A material that draws normals of an object."],[11,"shader","","",13],[11,"position","","",13],[11,"normal","","",13],[11,"view","","",13],[11,"transform","","",13],[11,"scale","","",13],[5,"OBJECT_VERTEX_SRC","","Vertex shader of the default object material."],[5,"OBJECT_FRAGMENT_SRC","","Fragment shader of the default object material."],[5,"NORMAL_VERTEX_SRC","",""],[5,"NORMAL_FRAGMENT_SRC","",""],[0,"post_processing","kiss3d","Post-processing effects."],[1,"Waves","kiss3d::post_processing","An useless post-processing effect mainly to test that everything works correctly."],[11,"shader","","",14],[11,"time","","",14],[11,"offset","","",14],[11,"fbo_texture","","",14],[11,"v_coord","","",14],[11,"fbo_vertices","","",14],[1,"Grayscales","","Post processing effect which turns everything in gray scales."],[11,"shader","","",15],[11,"fbo_texture","","",15],[11,"v_coord","","",15],[11,"fbo_vertices","","",15],[1,"SobelEdgeHighlight","","Post processing effect which turns everything in grayscales."],[11,"shiftx","","",16],[11,"shifty","","",16],[11,"zn","","",16],[11,"zf","","",16],[11,"threshold","","",16],[11,"shader","","",16],[11,"gl_nx","","",16],[11,"gl_ny","","",16],[11,"gl_fbo_depth","","",16],[11,"gl_fbo_texture","","",16],[11,"gl_znear","","",16],[11,"gl_zfar","","",16],[11,"gl_threshold","","",16],[11,"gl_v_coord","","",16],[11,"gl_fbo_vertices","","",16],[1,"OculusStereo","","An post-processing effect to support the oculus rift."],[11,"shader","","",17],[11,"time","","",17],[11,"fbo_vertices","","",17],[11,"fbo_texture","","",17],[11,"v_coord","","",17],[11,"kappa_0","","",17],[11,"kappa_1","","",17],[11,"kappa_2","","",17],[11,"kappa_3","","",17],[11,"scale","","",17],[11,"scale_in","","",17],[11,"w","","",17],[11,"h","","",17],[0,"post_processing_effect","","Trait implemented by every post-processing effect."],[6,"PostProcessingEffect","kiss3d::post_processing::post_processing_effect","Trait of post processing effect."],[9,"update","","Updates the post processing effect.",18],[9,"draw","","Render the effect.",18],[0,"resource","kiss3d","GPU resource managers"],[1,"FramebufferManager","kiss3d::resource","A framebuffer manager. It is a simple to to switch between an off-screen framebuffer and the\ndefault (window) framebuffer."],[11,"curr_fbo","","",19],[11,"curr_color","","",19],[11,"curr_depth","","",19],[11,"fbo","","",19],[1,"Texture","","A gpu texture. It contains the texture id provided by opengl and is automatically released."],[11,"id","","",20],[1,"TextureManager","","The texture manager."],[11,"default_texture","","",21],[11,"textures","","",21],[1,"MaterialManager","","The material manager."],[11,"default_material","","",22],[11,"materials","","",22],[1,"MeshManager","","The mesh manager."],[11,"meshes","","",23],[1,"Shader","","Structure encapsulating a shader program."],[11,"program","","",24],[11,"vshader","","",24],[11,"fshader","","",24],[11,"nocpy","","",24],[1,"ShaderAttribute","","Structure encapsulating an attribute."],[11,"id","","",25],[1,"ShaderUniform","","Structure encapsulating an uniform variable."],[11,"id","","",26],[1,"GPUVector","","A vector of elements that can be loaded to the GPU, on the RAM, or both."],[11,"trash","","",27],[11,"len","","",27],[11,"buf_type","","",27],[11,"alloc_type","","",27],[11,"handle","","",27],[11,"data","","",27],[1,"Mesh","","Aggregation of vertices, indices, normals and texture coordinates."],[11,"coords","","",28],[11,"faces","","",28],[11,"normals","","",28],[11,"uvs","","",28],[2,"RenderTarget","","The target to every rendering call."],[12,"Screen","","The screen (main framebuffer).",29],[12,"Offscreen","","An off-screen buffer.",29],[2,"BufferType","","Type of gpu buffer."],[12,"ArrayBuffer","","An array buffer bindable to a gl::ARRAY_BUFFER.",30],[12,"ElementArrayBuffer","","An array buffer bindable to a gl::ELEMENT_ARRAY_BUFFER.",30],[2,"AllocationType","","Allocation type of gpu buffers."],[12,"StaticDraw","","STATIC_DRAW allocation type.",31],[12,"DynamicDraw","","DYNAMIC_DRAW allocation type.",31],[12,"StreamDraw","","STREAM_DRAW allocation type.",31],[0,"material","","Trait implemented by materials."],[6,"Material","kiss3d::resource::material","Trait implemented by materials."],[9,"render","","Renders an object using this material.",32],[6,"GLPrimitive","kiss3d::resource","Trait implemented by structures that can be uploaded to a uniform or contained by a gpu array."],[9,"gl_type","","The opengl primitive type of this structure content.",33],[9,"size","","The number of elements of type `self.gl_type()` this structure stores.",33],[9,"upload","","Uploads the element to a gpu location.",33],[0,"text","kiss3d","Text rendering."],[1,"Glyph","kiss3d::text","A ttf glyph."],[11,"tex","","",34],[11,"advance","","",34],[11,"dimensions","","",34],[11,"offset","","",34],[11,"buffer","","",34],[1,"Font","","A ttf font."],[11,"library","","",35],[11,"face","","",35],[11,"texture_atlas","","",35],[11,"atlas_dimensions","","",35],[11,"glyphs","","",35],[11,"height","","",35],[11,"nocpy","","",35],[1,"TextRenderer","","A ttf text renderer."],[11,"shader","","",36],[11,"invsz","","",36],[11,"tex","","",36],[11,"color","","",36],[11,"pos","","",36],[11,"uvs","","",36],[11,"contexts","","",36],[11,"coords","","",36],[0,"utils","kiss3d","Various utilities not directly useful for rendering."],[1,"Recorder","kiss3d::utils","OpenGL rendering video recorder."],[11,"tmp_frame_buf","","",37],[11,"frame_buf","","",37],[11,"curr_frame_index","","",37],[11,"initialized","","",37],[11,"bit_rate","","",37],[11,"width","","",37],[11,"height","","",37],[11,"time_base","","",37],[11,"gop_size","","",37],[11,"max_b_frames","","",37],[11,"pix_fmt","","",37],[11,"tmp_frame","","",37],[11,"frame","","",37],[11,"context","","",37],[11,"format_context","","",37],[11,"video_st","","",37],[11,"scale_context","","",37],[11,"path","","",37]],"paths":[[1,"Window"],[1,"SceneNode"],[1,"SceneNodeData"],[1,"Object"],[1,"ObjectData"],[1,"ArcBall"],[1,"FirstPerson"],[1,"FirstPersonStereo"],[2,"Light"],[1,"MtlMaterial"],[1,"LineRenderer"],[1,"PointRenderer"],[1,"ObjectMaterial"],[1,"NormalsMaterial"],[1,"Waves"],[1,"Grayscales"],[1,"SobelEdgeHighlight"],[1,"OculusStereo"],[6,"PostProcessingEffect"],[1,"FramebufferManager"],[1,"Texture"],[1,"TextureManager"],[1,"MaterialManager"],[1,"MeshManager"],[1,"Shader"],[1,"ShaderAttribute"],[1,"ShaderUniform"],[1,"GPUVector"],[1,"Mesh"],[2,"RenderTarget"],[2,"BufferType"],[2,"AllocationType"],[6,"Material"],[6,"GLPrimitive"],[1,"Glyph"],[1,"Font"],[1,"TextRenderer"],[1,"Recorder"]]};
initSearch(searchIndex);
