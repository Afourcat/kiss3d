{"name":"Kiss3d","tagline":"Keep it simple, stupid 3d graphics engine for Rust.","body":"# kiss3d\r\n\r\nKeep It Simple, Stupid 3d graphics engine.\r\n\r\nThis library is born from the frustration in front of the fact that today’s 3D\r\ngraphics library are:\r\n\r\n* either too low level: you have to write your own shaders and opening a\r\n  window steals you 8 hours, 300 lines of code and 10L of coffee.\r\n* or high level but too hard to understand/use: those are libraries made to\r\n  write beautiful animations or games. They have a lot of feature; too much\r\n  feature if you only want to draw a few geometries on the screen.\r\n\r\n**kiss3d** is not designed to be feature-complete or fast.\r\nIt is designed to be able to draw simple geometric figures and play with them\r\nwith one-liners.\r\n\r\nAn on-line version of this documentation is available [here](http://www.rust-ci.org/sebcrozet/kiss3d/doc/kiss3d/index.html).\r\n\r\n## Features\r\nMost features are one-liners.\r\n\r\n* open a window with a default arc-ball camera and a point light.\r\n* a first-person camera is available too and user-defined cameras are possible.\r\n* display boxes, spheres, cones, cylinders, quads and lines.\r\n* change an object color or texture.\r\n* change an object transform (we use the [nalgebra](https://github.com/sebcrozet/nalgebra) library\r\n  to do that).\r\n* create basic post-processing effects.\r\n\r\nAs an example, having a red, rotating cube with the light attached to the camera is as simple as:\r\n\r\n```rust\r\nextern crate native;\r\nextern crate kiss3d;\r\nextern crate nalgebra;\r\n\r\nuse nalgebra::na::Vec3;\r\nuse kiss3d::window::Window;\r\nuse kiss3d::light;\r\n\r\n#[start]\r\nfn start(argc: int, argv: **u8) -> int {\r\n    native::start(argc, argv, main)\r\n}\r\n\r\nfn main() {\r\n    Window::spawn(\"Kiss3d: cube\", |window| {\r\n        let mut c = window.add_cube(1.0, 1.0, 1.0);\r\n\r\n        c.set_color(1.0, 0.0, 0.0);\r\n\r\n        window.set_light(light::StickToCamera);\r\n\r\n        window.render_loop(|_| {\r\n            c.prepend_to_local_rotation(&Vec3::new(0.0f32, 0.014, 0.0))\r\n        })\r\n    })\r\n}\r\n```\r\n\r\nSome controls are handled by default by the engine (they can be overridden by the user):\r\n\r\n* `scroll`: zoom in / zoom out.\r\n* `left click + drag`: look around.\r\n* `right click + drag`: translate the view point.\r\n* `enter`: look at the origin (0.0, 0.0, 0.0).\r\n\r\n## Compilation\r\nYou will need the last rust compiler from the `master` branch.\r\nIf you encounter problems, make sure you have the last compiler version before creating an issue.\r\n\r\nThe simplest way to build **kiss3d** and all its dependencies is to do a\r\nrecursive clone:\r\n\r\n\r\n    git clone --recursive git://github.com/sebcrozet/kiss3d.git\r\n    cd kiss3d\r\n    make deps\r\n    make\r\n    make examples\r\n\r\n\r\nThe last command will compile examples on the `bin` folder.\r\nUse `make doc` to compile the documentation on the `doc` folder.\r\n\r\n## Contributions\r\nI’d love to see people improving this library for their own needs. However, keep in mind that\r\n**kiss3d** is KISS. One-liner features (from the user point of view) are preferred.\r\n\r\n## Acknowledgements\r\n\r\nThanks to all the Rustafarians for their help, and their OpenGl/ffmpeg/stb-image/etc. bindings.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}